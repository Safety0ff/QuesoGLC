Changes made from the "0.2" release to the "0.3" release:
-----------------------------------------------------------

- Fixed all GLC functions that uses individual character : if the current string
  type is GLC_UTF8, the GLint code is now correctly handled
- Fixed a bug in the detection of the filename extension of font files
- Fixed the master creation when glcGenContext() is called : no void master
  should be created anymore
- Fixed a bug so that display lists created by QuesoGLC are now deleted when
  glcDeleteGLObjects() is called or when a master is destroyed
- Strings returned by glcGetc() are now converted in the relevant Unicode format
- Added an "uninstall" target to the makefile
- When the shared library is built, the version number is appended to the
  library name and the corresponding links are created when QuesoGLC is
  installed. This allows several different versions of QuesoGLC to coexist
  on most *nix.
- Pablo Barbáchano fixed the install process of QuesoGLC

Changes made from the "0.1" release to the "0.2" release:
-----------------------------------------------------------

- Textures in GLC_TEXTURE mode are now of variable size instead of fixed size
  (previously 64x64).It both optimized the texture memory and removed the
  garbage that could appear when rendering some fonts.
- Added UTF-8 support
- QuesoGLC does not open anymore the font files at font creation. Instead, font
  files are opened when the fonts are added to GLC_CURRENT_FONT_LIST. It lowers
  the number of font files that are simultaneously opened.
- Every strings are now stored internally in Unicode UTF-8 format. Strings are
  converted back to the current GLC_STRING_TYPE "on the fly".
- Get rid of the string list objects (files ostrlst.[ch]) and the Unicode
  character object (files ounichar.[ch]). This simplified the code.
- Now uses standard predefined macros to detect Mac OSX platforms
- QuesoGLC now uses Fontconfig to locate and examine fonts
- Fixed invalid preprocessing tokens of test4 that prevented it to be compiled
  with pedantic-errors enabled.
- QuesoGLC now uses Doxygen for its documentation.

Changes made from the "Birth" release to the "0.1" release:
-----------------------------------------------------------

- Get rid of NDBM : Unicode names are now stored in a const array which is
  automagically built from buildDB.py
- FreeType lists are now used for the string list object, master lists,
  font lists, current font lists and texture object lists.
- A mutex is now used for every access to the database since NDBM is not
  thread-safe.
- Fixed a bug where the content returned by dbm_fetch() was freed. This
  behaviour was wrong since dbm_fetch() returns static data.
- Now uses NDBM (which is much more portable) instead of GDBM
- Fixed a bug in glcDeleteContext() where QuesoGLC tried to destroy the GL
  objects of the current context instead of those of the context to be deleted.
- Contexts are now stored in a linked list and their number is not limited to
  16 anymore.
- Fixed glcGetAllContexts which returned wrong context IDs and did not zero-
  terminate the array.
- Fixed the error path in __glcInitLibrary where glcCommonArea was freed before
  its members.
- Added many comments to the sources.
- Removed the stupid parameter GLC_INTERNAL_ERROR
- QuesoGLC now computes automatically the resolution of the screen in DPI using
  X window commands.
- The GLC_RESOLUTION parameter now provides a way for the user to choose the
  precision of de Casteljau's algorithm.
- Fixed a bug that occured when a context was deleted : its entry were not
  deleted from the 'stateList' array.
- QuesoGLC now has the ability to use custom memory manager routines
  (see __glcFree, __glcMalloc and __glcRealloc)
- FreeType2 now uses a custom memory manager based on __glcFree, __glcMalloc
  and __glcRealloc. This helps debugging and detection of memory leaks.
- Variables GLC_MIN_MAPPED_CODE, GLC_MAX_MAPPED_CODE, GLC_CHAR_COUNT and the
  list GLC_CHAR_LIST are now updated when a new font file is added to a master.
- Changed license of QuesoGLC to LGPL
- Fixed glcAppendFont so that it raises GLC_PARAMETER_ERROR if the font is an
  element of GLC_CURENT_FONT_LIST at the beginning of the command execution.
- Fixed glcFont so that it behaves correctly if the font parameter is zero.
- Fixed glcFontFace so that it leaves the current face unchanged if it fails to
  set a new face.
- Fixed glcFontMap so that it checks if the character to be mapped is an
  element of the list GLC_CHAR_LIST.
- Fixed glcFontMap so that if no character name is given then the code 'inCode'
  is removed from the charmap.
- Fixed glcRenderCountedString, so that it raises GLC_PARAMETER_ERROR if the
  parameter inCount is less than zero.
- Fixed glcReplacementCode so that it can use a code other than
  GLC_REPLACEMENT_CODE.
- Translated C++ code to pure ANSI C (i.e. get rid of C++)
- QuesoGLC can now be built as a shared library.
