QuesoGLC draft-1

This file contains notes about non-conformance and "extensions" to 
the GLC specs 0.2

Preface
-------
SGI provides the GLC specs 0.2 at www.opengl.org but they have stayed in a draft
version since 1996 (hence the 0.2 version number) and then they are far from
completion. Some things are ambiguous or even not documented at all. 

In order to provide a complete, self-consistent libary, I have been led to take
some arbitrary decisions on how to implement some aspects of QuesoGLC. These
choices might or might not be conformant to the specs. Hence the purpose of this
file which is to contain the (hoppefully) complete list of non-conformance and
"extensions" to the specs. By "extensions" I mean things that are not fully
documented in the docs such as the GLC_RESOLUTION state variable for which the
specs do not clearly describe what it is intended for and how it should
interfer on the library behaviour.

Notice that the non-conformance notes are intended to be fixed so that QuesoGLC
becomes fully conformant. However "extensions" issues can not be fixed without
SGI help.

Finally specifications generally let some freedom to the implementation
developers to determine the way they implement some things. This is what I call
"Arbitrary choices". Arbitrary choices are those details that may vary from one
implementation to another although they are conformant.

Non-conformance:
---------------

- In the current implementation, glcGetMasteri(x, GLC_MIN_MAPPED_CODE) always
  returns 0 (zero) and glcGetMasteri(x, GLC_MAX_MAPPED_CODE) always returns
  0x7FFFFFFF. This non-conformance will not be fixed until FreeType provides
  some API entries to read directly into the charmaps.

- In the current implementation, glcGetMasteri(x, GLC_CHAR_COUNT) always returns
  0 (zero) and glcGetMasterListc(x, GLC_CHAR_LIST, y) always generates a
  GLC_PARAMETER_ERROR whatever x and y are. As a consequence, glcFontMap does
  not check if its parameter inCharName is an element of the font's string list
  attribute GLC_CHAR_LIST. This non-conformance will not be fixed until FreeType
  provides some API entries to read directly into the charmaps.

- In the current implementation, glcGetMasterc(GLC_VERSION) always return NULL.

Extensions:
----------

- QuesoGLC uses the GLC_RESOLUTION parameter to indicate the resolution in dot
  per inch (dpi) at which the characters are rendered. If the GLC_RESOLUTION
  parameter is 0 (which is its default value) then QuesoGLC uses a 72 dpi
  resolution otherwise QuesoGLC uses the last value given with glcResolution().

Arbitrary choices:
-----------------

- Fonts are rendered at the default size of 1 point. If the user wants to
  display his text at a different size, he should use glScale() or glcScale()
  to precise the actual size he wants.
  
- When using the textured rendering mode, the default texture size is 64x64.
  Since GLC does not provide an API entry to modify it, the only way to change
  this value is to modify GLC_TEXTURE_SIZE in src/render.c and to re-compile
  QuesoGLC.

- The GLC API is designed to support a variety of master formats, but the
  current implementation supports only masters in scalable formats that can be
  read by FreeType.

- In the current implementation, a catalog file must be in the format generated
  by the X Window System utility program mkfontdir(1). Future releases may use
  a different format.

- In the current implementation, the font files that belong to the same family
  will be mapped into a single GLC master object that has multiple faces. For
  example, the files cour.pfa, courb.pfa, courbi.pfa and couri.pfa are visible
  through the GLC API as a single master with GLC_FAMILY="Courier",
  GLC_FACE_COUNT=4 and GLC_FACE_LIST=("Regular","Bold","Bold Italic","Italic").

- When the GLC_GL_OBJECTS state variable is set to GL_TRUE, QuesoGLC generates
  display lists each time the user tries to render a character for the first
  time. Afterwards, when the user asks QuesoGLC to render those characters,
  QuesoGLC draws the display lists instead of re-processing the character. This
  feature has however some limitations :
      - QuesoGLC creates display lists "just on time". This means that no
        display lists are stored for a given character until the user asks
	QuesoGLC to render it.
      -	QuesoGLC do not create display lists when the rendering mode is
        GLC_BITMAP. Moreover the user should not try to create himself the
	display lists by encapsulating glcRenderChar by a glNewList / glEndList
	pair. This will fail because QuesoGLC deletes the picture used to
	render the character as soon as the picture is drawn.

- When the user asks for the list of the display lists using the command
  "glcGetListi(GLC_LIST_OBJECT_LIST, i)", QuesoGLC may not return the display
  lists names in growing order nor in the order in which they were created. In
  other words, when QuesoGLC adds a display list name to the list, the new entry
  may not be the last one. Moreover, the global ordering of the list may change
  each time QuesoGLC creates a new display list. This is due to internal
  management of the display lists (QuesoGLC uses binay trees which are not
  convenient to keep track of the order in which display lists have been
  created).

- GLC specifications allows any implementation to load some "default masters"
  during the initialization. This feature allows the user to access to some
  default fonts like "Times" or "Courier", even if he did not call
  glcAppendCatalog or glcPrependCatalog.
  QuesoGLC is supposed to run on several different platforms. This portability
  has a drawback : different platforms do not locate the font files to the same
  place. So, in order to get rid of this limitation, QuesoGLC uses an
  environment variable called GLC_PATH. This variable defines the path (in the
  same format than PATH) to the directories which contain font files : each time
  that glcGenContext is executed, QuesoGLC looks up in the directories listed
  in GLC_PATH to find fonts files.
